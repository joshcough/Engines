Engine2 

   how about engine 2 is just like engine 1, 
   except that clients don't have to wait for messages to return 
   before sending the next message. 
   this will require the engine to maintain a queue. 
   but what do we do if the queue gets full? how big can a queue get?
   we should employ some throttling on the exchanges to give the 
   queues a chance to fill up.

   maybe instead of STOP, we can add a new message type indicating queue fullness: HOLD?

   here is what i think: if the queue fills up, the engine sends a stop message back
   its a relatively arbitrary decision, but not an unreasonable one. 
   but hmm.. what if the client is throttled reading replies? 
   clients must always receive replies, that must be a rule.
   so what do we do in that case? we can let the queue grow forever, but if it overflows, 
   just get an out of memory error in this engine. 

   the next engine could write serialize the queue to disk or something.
   we will already have a binary format for messages. but lets talk about that later.

   so, this engine must be able to distinguish clients from exchanges. 
   which is kind of sad because in version 1 you could pretty much just send anyone anything.
   but whatever, were designing a financial messaging engine, not a chat client.

Big question:
  what happens if a client dies, or more importantly, an exchange dies?

  * if a client dies, if a message fails, we can stick it back on the front of the queue.
  * then we could send all the messages in the queue when it reconnects.
  * but then we have to actually deal with reconnection. maybe we can do that in version 3?

  * if an exchange dies, we can send messages to the other exchanges, or reply STOP.
    maybe stop should have a reason? could be a string or an int or whatever.
    this is the same as version 1. 
